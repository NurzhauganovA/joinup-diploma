# Generated by Django 5.2 on 2025-05-06 12:07

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='club_category_icons/')),
            ],
            options={
                'verbose_name': 'Club Category',
                'verbose_name_plural': 'Club Categories',
                'db_table': 'club_categories',
            },
        ),
        migrations.CreateModel(
            name='ClubInterestQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Club Interest Quiz',
                'verbose_name_plural': 'Club Interest Quizzes',
                'db_table': 'club_interest_quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('abbreviation', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name': 'Faculty',
                'verbose_name_plural': 'Faculties',
                'db_table': 'faculties',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='school/logo/')),
                ('name', models.CharField(max_length=155)),
                ('address', models.CharField(max_length=155)),
                ('direct', models.CharField(max_length=155)),
                ('language', models.CharField(max_length=155)),
                ('country', models.CharField(blank=True, max_length=155, null=True)),
                ('region', models.CharField(choices=[('Batys', 'Западно-Казахстанская область'), ('Aqtobe', 'Актюбинская область'), ('Atyrau', 'Атырауская область'), ('Mangystau', 'Мангистауская область'), ('Qostanay', 'Костанайская область'), ('Soltustik', 'Северо-Казахстанская область'), ('Pavlodar', 'Павлодарская область'), ('Qaragandy', 'Карагандинская область'), ('Ulytau', 'Улытауская область'), ('Qyzylorda', 'Кызылординская область'), ('Turkistan', 'Туркестанская область'), ('Zhambyl', 'Жамбылская область'), ('Almaty', 'Алматинская область'), ('Zhetisu', 'Жетысуская область'), ('Abay', 'Абайская область'), ('Shygys', 'Восточно-Казахстанская область'), ('Aqmola', 'Акмолинская область')], max_length=155)),
                ('city', models.CharField(blank=True, max_length=155, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('bin', models.CharField(max_length=12)),
                ('short_name', models.CharField(max_length=155)),
            ],
            options={
                'verbose_name': 'Школа',
                'verbose_name_plural': 'Школы',
                'db_table': 'school',
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='club_logos/')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='club_banners/')),
                ('description', models.TextField()),
                ('short_description', models.CharField(max_length=200)),
                ('establishment_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending Approval')], default='pending', max_length=20)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('telegram', models.URLField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('accepting_members', models.BooleanField(default=True)),
                ('members_limit', models.PositiveIntegerField(default=0, help_text='0 means no limit')),
                ('is_featured', models.BooleanField(default=False)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('members_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clubs', to='school.clubcategory')),
                ('associated_faculties', models.ManyToManyField(blank=True, related_name='clubs', to='school.faculty')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clubs', to='school.school')),
            ],
            options={
                'verbose_name': 'Club',
                'verbose_name_plural': 'Clubs',
                'db_table': 'clubs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClubEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('meeting', 'Meeting'), ('workshop', 'Workshop'), ('competition', 'Competition'), ('audition', 'Audition/Casting'), ('performance', 'Performance'), ('training', 'Training'), ('other', 'Other')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('image', models.ImageField(blank=True, null=True, upload_to='event_images/')),
                ('registration_required', models.BooleanField(default=False)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('max_participants', models.PositiveIntegerField(default=0, help_text='0 means no limit')),
                ('current_participants', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='school.club')),
            ],
            options={
                'verbose_name': 'Club Event',
                'verbose_name_plural': 'Club Events',
                'db_table': 'club_events',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ClubNews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='club_news/')),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='news', to='school.club')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Club News',
                'verbose_name_plural': 'Club News',
                'db_table': 'club_news',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClubResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('document', 'Document'), ('video', 'Video Tutorial'), ('presentation', 'Presentation'), ('link', 'External Link'), ('other', 'Other')], max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='club_resources/')),
                ('link', models.URLField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='school.club')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_resources', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Club Resource',
                'verbose_name_plural': 'Club Resources',
                'db_table': 'club_resources',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('message', models.TextField(blank=True)),
                ('donor_name', models.CharField(blank=True, max_length=100)),
                ('donor_email', models.EmailField(blank=True, max_length=254)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donations', to='school.club')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='donations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Donation',
                'verbose_name_plural': 'Donations',
                'db_table': 'donations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClubApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('founder_year', models.PositiveSmallIntegerField()),
                ('founder_motivation', models.TextField()),
                ('goals', models.TextField()),
                ('activities', models.TextField()),
                ('meeting_frequency', models.CharField(max_length=100)),
                ('min_members', models.PositiveSmallIntegerField(default=5)),
                ('faculty_advisor', models.CharField(blank=True, max_length=100)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='club_applications/logos/')),
                ('supporting_document', models.FileField(blank=True, null=True, upload_to='club_applications/documents/')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('more_info', 'More Information Needed')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('founder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_applications', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.clubcategory')),
                ('founder_faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.faculty')),
            ],
            options={
                'verbose_name': 'Club Application',
                'verbose_name_plural': 'Club Applications',
                'db_table': 'club_applications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OptionCategoryRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strength', models.SmallIntegerField(default=1, help_text='Strength of relationship: 1-5')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.clubcategory')),
            ],
            options={
                'verbose_name': 'Option Category Relation',
                'verbose_name_plural': 'Option Category Relations',
                'db_table': 'option_category_relations',
            },
        ),
        migrations.CreateModel(
            name='QuizOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('related_categories', models.ManyToManyField(through='school.OptionCategoryRelation', to='school.clubcategory')),
            ],
            options={
                'verbose_name': 'Quiz Option',
                'verbose_name_plural': 'Quiz Options',
                'db_table': 'quiz_options',
                'ordering': ['question__order', 'text'],
            },
        ),
        migrations.AddField(
            model_name='optioncategoryrelation',
            name='option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.quizoption'),
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='school.clubinterestquiz')),
            ],
            options={
                'verbose_name': 'Quiz Question',
                'verbose_name_plural': 'Quiz Questions',
                'db_table': 'quiz_questions',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='quizoption',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='school.quizquestion'),
        ),
        migrations.CreateModel(
            name='QuizResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_taken', models.DateTimeField(auto_now_add=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.clubinterestquiz')),
                ('recommended_clubs', models.ManyToManyField(related_name='recommended_in', to='school.club')),
                ('top_category_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='top_results_1', to='school.clubcategory')),
                ('top_category_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='top_results_2', to='school.clubcategory')),
                ('top_category_3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='top_results_3', to='school.clubcategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Quiz Result',
                'verbose_name_plural': 'Quiz Results',
                'db_table': 'quiz_results',
                'ordering': ['-date_taken'],
                'unique_together': {('user', 'quiz')},
            },
        ),
        migrations.CreateModel(
            name='OurSchools',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_short_name', models.CharField(max_length=155)),
                ('short_name', models.CharField(max_length=155)),
                ('fix_sum_contract', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_yearly_payment', models.BooleanField(default=True)),
                ('school', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.school')),
            ],
            options={
                'verbose_name': 'Информация о школе',
                'verbose_name_plural': 'Информация о школах',
                'db_table': 'our_schools',
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_num', models.IntegerField()),
                ('class_liter', models.CharField(max_length=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_graduated', models.BooleanField(default=False)),
                ('max_class_num', models.PositiveIntegerField(default=4)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('mentor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_teacher', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.school')),
            ],
            options={
                'verbose_name': 'Класс',
                'verbose_name_plural': 'Классы',
                'db_table': 'class',
            },
        ),
        migrations.CreateModel(
            name='SchoolRequisites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=155)),
                ('bank_address', models.CharField(max_length=155)),
                ('bank_bik', models.CharField(max_length=9)),
                ('bank_iik', models.CharField(max_length=20)),
                ('bank_kbe', models.CharField(max_length=20)),
                ('bank_bin', models.CharField(max_length=12)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.school')),
            ],
            options={
                'verbose_name': 'Реквизит школы',
                'verbose_name_plural': 'Реквизиты школ',
                'db_table': 'school_requisites',
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('attended', 'Attended'), ('cancelled', 'Cancelled'), ('waitlisted', 'Waitlisted')], default='registered', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='school.clubevent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Registration',
                'verbose_name_plural': 'Event Registrations',
                'db_table': 'event_registrations',
                'unique_together': {('event', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ClubMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('founder', 'Founder'), ('president', 'President'), ('vice_president', 'Vice President'), ('secretary', 'Secretary'), ('treasurer', 'Treasurer'), ('member', 'Member'), ('trainer', 'Trainer'), ('advisor', 'Advisor')], default='member', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending Approval')], default='pending', max_length=20)),
                ('join_date', models.DateField(auto_now_add=True)),
                ('bio', models.TextField(blank=True)),
                ('skills', models.TextField(blank=True)),
                ('academic_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this membership is visible to others')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='school.club')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_memberships', to=settings.AUTH_USER_MODEL)),
                ('faculty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.faculty')),
            ],
            options={
                'verbose_name': 'Club Member',
                'verbose_name_plural': 'Club Members',
                'db_table': 'club_members',
                'unique_together': {('user', 'club')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='optioncategoryrelation',
            unique_together={('option', 'category')},
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.quizquestion')),
                ('quiz_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='school.quizresult')),
                ('selected_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.quizoption')),
            ],
            options={
                'verbose_name': 'User Answer',
                'verbose_name_plural': 'User Answers',
                'db_table': 'user_answers',
                'unique_together': {('quiz_result', 'question')},
            },
        ),
    ]
